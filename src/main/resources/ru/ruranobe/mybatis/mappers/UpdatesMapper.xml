<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ru.ruranobe.mybatis.mappers.UpdatesMapper">

    <select id="getLastUpdatesBy" parameterType="map" resultType="ru.ruranobe.mybatis.entities.tables.Update">
        SELECT
        last_updates.update_id AS updateId,
        last_updates.update_type AS updateType,
        last_updates.project_id AS projectId,
        last_updates.volume_id AS volumeId,
        last_updates.chapter_id AS chapterId,
        last_updates.show_time AS showTime,
        last_updates.description AS description,
        c.title AS chapterTitle,
        v.name_title AS volumeTitle,
        v.name_short AS volumeTitleShort,
        c.url AS chapterUrl,
        v.url AS volumeUrl,
        coalesce(pp.works, p.works) AS works
        FROM (SELECT *
        FROM updates
        WHERE show_time &lt; (now())
        <if test="volumeId != null">
            AND volume_id = #{volumeId}
        </if>
        <if test="updateType != null">
            AND update_type = #{updateType}
        </if>
        <if test="projectId != null">
            AND project_id = coalesce((SELECT parent_id
            FROM projects
            WHERE project_id = #{projectId}), #{projectId})
        </if>
        ORDER BY show_time DESC
        LIMIT #{limitFrom}, #{limitTo}) last_updates
        LEFT JOIN chapters c ON last_updates.chapter_id = c.chapter_id
        LEFT JOIN volumes v ON last_updates.volume_id = v.volume_id
        LEFT JOIN projects p ON last_updates.project_id = p.project_id
        LEFT JOIN projects pp ON pp.project_id = p.parent_id
        ORDER BY show_time DESC, coalesce(pp.order_number, p.order_number), p.order_number DESC, v.sequence_number DESC,
        c.order_number DESC
    </select>

    <select id="getUpdatesCountBy" resultType="int">
        SELECT count(*)
        FROM updates
        WHERE (volume_id = #{volumeId} OR #{volumeId} IS NULL)
              AND (project_id = #{projectId} OR #{projectId} IS NULL)
              AND (update_type = #{updateType} OR #{updateType} IS NULL)
    </select>

    <select id="getUpdatesByVolumeId" resultType="ru.ruranobe.mybatis.entities.tables.Update">
        SELECT
            updates.update_id   AS updateId,
            updates.update_type AS updateType,
            updates.update_type AS updateType,
            updates.project_id  AS projectId,
            updates.volume_id   AS volumeId,
            updates.chapter_id  AS chapterId,
            updates.show_time   AS showTime,
            updates.description AS description
        FROM updates
        WHERE volume_id = #{volumeId}
    </select>

    <insert id="insertUpdate" parameterType="ru.ruranobe.mybatis.entities.tables.Update" keyProperty="updateId"
            useGeneratedKeys="true">
        INSERT INTO updates
        SET project_id  = #{projectId},
            volume_id   = #{volumeId},
            chapter_id  = #{chapterId},
            update_type = #{updateType},
            show_time   = #{showTime},
            description = #{description}
    </insert>

    <delete id="deleteUpdate" parameterType="int">
        DELETE FROM updates
        WHERE update_id = #{updateId}
    </delete>

    <update id="updateUpdate" parameterType="ru.ruranobe.mybatis.entities.tables.Update">
        UPDATE updates
        SET project_id  = #{projectId},
            volume_id   = #{volumeId},
            chapter_id  = #{chapterId},
            update_type = #{updateType},
            show_time   = #{showTime},
            description = #{description}
        WHERE update_id = #{updateId}
    </update>

    <!--TODO: add resultMap-->
</mapper>
